global
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    # user        haproxy
    # group       haproxy
    # daemon

    stats socket /var/lib/haproxy/stats

    ssl-default-bind-options    no-sslv3
    ssl-default-bind-ciphers    EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:ECDHE-RSA-AES128-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA128:DHE-RSA-AES128-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA128:ECDHE-RSA-AES128-SHA384:ECDHE-RSA-AES128-SHA128:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA384:AES128-GCM-SHA128:AES128-SHA128:AES128-SHA128:AES128-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4

    tune.ssl.default-dh-param   2048

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  http-server-close
    option                  httpclose
    option                  forwardfor except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend http-incoming
    mode http
    bind :80
    redirect scheme https code 301 if !{ ssl_fc }

frontend https-incoming
    mode http
    bind :443 ssl crt /etc/auth0/cnamer/ssl/

    http-request set-header Host %[req.hdr(host),lower,map(/etc/auth0/cnamer/maps/domain-to-tenant.map)]
    rspadd Strict-Transport-Security:\ max-age=31536000;\ includeSubDomains
    rspadd X-Frame-Option:\ DENY
    reqadd X-Forwarded-Proto:\ https

    acl letsencrypt-acl path_beg /.well-known/amce-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl
    use_backend %[req.hdr(host),lower,map(/etc/auth0/cnamer/maps/domain-to-backend.map)]

backend letsencrypt-backend
  server cnamer localhost:54321 check

backend us-prod
  mode http
  balance roundrobin

  server manage.auth0.com manage.auth0.com:443 ssl verify none check

backend eu-prod
  mode http
  balance roundrobin

  server manage.eu.auth0.com manage.eu.auth0.com:443 ssl verify none check

backend au-prod
  mode http
  balance roundrobin

  server manage.au.auth0.com manage.au.auth0.com:443 ssl verify none check

backend us-test
  mode http
  balance roundrobin

  server us us:8080 check

backend eu-test
  mode http
  balance roundrobin

  server eu eu:8080 check

backend au-test
  mode http
  balance roundrobin

  server au au:8080 check